#ifndef LIBQOTP_H_20231127
#define LIBQOTP_H_20231127

#include <cstdint>

#include <QString>

/**
 * @def QOTP_MINIMUM_DIGIT
 *
 * Defines the minimum number of digits for the generated HOTP value.
 *
 * This macro sets the lower limit on the length of the one-time password (OTP) generated by the HOTP algorithm.
 * The RFC 4226 recommends that OTPs should have a minimum length of 6 digits to ensure a reasonable level of security.
 * Users of the library can define this macro to increase the minimum length requirement if desired.
 *
 * The default value is set to 6 if it is not defined prior to including this library.
 *
 * Usage example:
 *     #define QOTP_MINIMUM_DIGIT 6
 *     #include <libqotp/qotp.h>
 */
#ifndef QOTP_MINIMUM_DIGIT
#define QOTP_MINIMUM_DIGIT 6
#endif

/**
 * @def QOTP_MAXIMUM_DIGIT
 *
 * Defines the maximum number of digits for the generated HOTP value.
 *
 * This macro sets the upper limit on the length of the one-time password (OTP) generated by the HOTP algorithm.
 * While the HOTP algorithm can technically generate OTPs of any length, values longer than 8 digits are typically not
 * user-friendly and are often not supported by OTP systems. Users of the library can define this macro to decrease the
 * maximum length requirement if desired, keeping in mind usability considerations.
 *
 * The default value is set to 8 if it is not defined prior to including this library.
 *
 * Usage example:
 *     #define QOTP_MAXIMUM_DIGIT 8
 *     #include <libqotp/qotp.h>
 */
#ifndef QOTP_MAXIMUM_DIGIT
#define QOTP_MAXIMUM_DIGIT 8
#endif

namespace libqotp
{
   /**
    * Generates an HMAC-based One-Time Password (HOTP).
    *
    * This function implements the HOTP algorithm as specified in RFC 4226.
    * It generates a one-time password using a shared secret key and a moving factor (counter).
    *
    * RFC 4226 (https://tools.ietf.org/html/rfc4226) states that the shared secret must be strong,
    * and the counter is a moving factor which ensures a different password is generated each time.
    *
    * @param secret The shared secret key as a QByteArrayView.
    * @param counter The moving factor (counter value) for HOTP generation.
    * @param digits The desired length of the OTP. Defaults to 6 if not specified.
    * @param digitMinimum The minimum number of digits the OTP should have. This value should
    *        not be less than the global QOTP_MINIMUM_DIGIT setting. Defaults to QOTP_MINIMUM_DIGIT.
    * @param digitMaximum The maximum number of digits the OTP should have. This value should
    *        not exceed the global QOTP_MAXIMUM_DIGIT setting. Defaults to QOTP_MAXIMUM_DIGIT.
    * @return A QString containing the OTP. Returns an empty string in case of an error.
    *
    * The function ensures that the length of the generated OTP is within the specified
    * minimum and maximum digit limits. If the 'digits' parameter is outside the range
    * defined by 'digitMinimum' and 'digitMaximum', the function returns an empty string.
    */
   QString hotp(
      QByteArrayView secret,
      uint64_t counter,
      unsigned int digits = 6,
      unsigned int digitMinimum = QOTP_MINIMUM_DIGIT,
      unsigned int digitMaximum = QOTP_MAXIMUM_DIGIT);

   /**
    * @brief Convenience wrapper function for generating HOTP using a Base32 encoded secret.
    *
    * This function decodes the given Base32 encoded secret and then generates an HOTP value.
    * It is a wrapper around the main hotp function, providing an easy way to work with Base32 secrets.
    *
    * @param base32 The Base32 encoded secret key.
    * @param counter The moving factor (counter value) for HOTP generation.
    * @param digits The desired length of the OTP. Defaults to 6 if not specified.
    * @param digitMinimum The minimum number of digits the OTP should have. Defaults to QOTP_MINIMUM_DIGIT.
    * @param digitMaximum The maximum number of digits the OTP should have. Defaults to QOTP_MAXIMUM_DIGIT.
    * @return A QString containing the OTP or an empty string in case of an error.
    */
   QString hotp_base32(
      const QString& base32,
      uint64_t counter,
      unsigned int digits = 6,
      unsigned int digitMinimum = QOTP_MINIMUM_DIGIT,
      unsigned int digitMaximum = QOTP_MAXIMUM_DIGIT);

   /**
    * @brief Convenience wrapper function for generating HOTP using a Base64 encoded secret.
    *
    * This function decodes the given Base64 encoded secret and then generates an HOTP value.
    * It is a wrapper around the main hotp function, providing an easy way to work with Base64 secrets.
    * Optional Base64 encoding options can be specified.
    *
    * @param base64 The Base64 encoded secret key.
    * @param counter The moving factor (counter value) for HOTP generation.
    * @param digits The desired length of the OTP. Defaults to 6 if not specified.
    * @param digitMinimum The minimum number of digits the OTP should have. Defaults to QOTP_MINIMUM_DIGIT.
    * @param digitMaximum The maximum number of digits the OTP should have. Defaults to QOTP_MAXIMUM_DIGIT.
    * @param options The Base64 encoding options. Defaults to QByteArray::Base64Encoding.
    * @return A QString containing the OTP or an empty string in case of an error.
    */
   QString hotp_base64(
      const QByteArray& base64,
      uint64_t counter,
      unsigned int digits = 6,
      unsigned int digitMinimum = QOTP_MINIMUM_DIGIT,
      unsigned int digitMaximum = QOTP_MAXIMUM_DIGIT,
      QByteArray::Base64Options options = QByteArray::Base64Option::Base64Encoding);
}

#endif
